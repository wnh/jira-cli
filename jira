#!/usr/bin/env joker
(ns scripts.jira
  (:require [joker.string :as s]
            [joker.json   :as j]
            [joker.http   :as h]
            [joker.base64 :refer [encode-string]]))

(def *max-width* 72)
(def *eight* "        ")

(defn token []
  (let [tk (s/trim (slurp "/home/wharding/.atlassian_token"))
        st (str "wharding@avalancheassociation.ca:" tk)]
    (encode-string st)))

;;; TEXT REFLOW

(defn count-after-add
  "how long will the last line be if we add the next word to it?"
  [line next-word]
  (+ (count line)
     (count next-word)
     ; for the space
     1))

(defn clean-prefix [prefix]
  (s/replace prefix #"\S" " "))

(defn reflow-lines [txt first-prefix width]
  (let [words (s/split txt #"\s+")
        indent (clean-prefix first-prefix)
        xlines (reduce (fn [[lines l] next-word]
                         (if (< width (count-after-add l next-word))
                           ;; The appending of " " leaves a trailing space on lines, eww
                           [(conj lines l) (str indent next-word " ")]
                           [lines (str l next-word " ")]))

                       [[] first-prefix]
                       words)
        pr-lines (conj (first xlines) (second xlines))]
    pr-lines))

;;; Content rendering for description


(defmulti render-content
  "Recursively transform issue content into terminal readable string based
  on the 'type'"
  (fn [c _]
    (get c "type")))

(defn render-children [children ctx]
  (map (fn [child] (render-content child ctx))
       children))

(defmethod render-content nil [data ctx]
  ; there is no content, seems to be a thing
  "")
(defmethod render-content "doc" [data ctx]
  (s/join "\n"
          (render-children (get data "content") ctx)))

(defmethod render-content "paragraph" [data ctx]
  ;(str ctx (s/join "  " (render-children (get data "content") ctx))))
  (let [ch (render-children (get data "content") ctx)
        block (s/join ch)
        ll (reflow-lines block ctx *max-width*)]
    (s/join "\n" ll)))

(defmethod render-content "text" [data ctx]
  (get data "text"))

(defmethod render-content "hardBreak" [data ctx]
  "\n")

(defmethod render-content "orderedList" [data ctx]
  (let [children (get data "content")
        indexes (map inc (range))]
    (->> children
         (map (fn [n child] (render-content child (str ctx (format "  %2d. " n)))) indexes)
         (s/join "\n"))

  ))

(defmethod render-content "bulletList" [data ctx]
  (s/join "\n" (render-children (get data "content")
                                (str ctx "  * "))))

(defmethod render-content "listItem" [data ctx]
  (s/join "\n" (render-children (get data "content") ctx)))

(defmethod render-content "mediaSingle" [data ctx]
  "TODO: media single"
  (prn data))
(defmethod render-content "link" [data ctx]
  "TODO: LINK HERE")
(defmethod render-content "codeBlock" [data ctx]
  "TODO: CODE HERE")

(defmethod render-content "code" [data ctx]
  "TODO: CODE HERE")

(defn get-sprint
  "this is sketchy."
  [issue]
  (let [sprint-list (get-in issue ["fields" "customfield_10005"])
        sprint? (first sprint-list)]
    (get sprint? "name")))

(defn render-comment [cmt ctx]
  (println (str ctx
                (get-in cmt ["author" "displayName"])
                " on "
                (get-in cmt ["created"])))
  ;(prn(get-in cmt ["body" "content"]))
  (println (render-content (get-in cmt ["body"])
                           (str ctx "    "))))

(comment "
    MAIN-322
    Epic:   Workflow  ** how do we get this?
    Priority: High
    Assignee: Will Harding
    Labels: None
    Story: point estimate 5
    Sprint: Will's first sprint 2 [+1]
    Reporter: steve
    Development: Create branch
    ")

(defn render-attachments [issue prefix]
  (let [chunks (for [a (get-in issue ["fields" "attachment"])]
                 (str prefix
                      (get a "filename")
                      "\n"
                      prefix
                      "    "
                      (get a "content")))]
    (s/join "\n" chunks)))

(defn render-detail-view [issue]
  (println (get issue "key"))
  (println (s/join "\n" (reflow-lines  (get-in issue ["fields" "summary"])
                                       *eight*
                                       *max-width*)))
  (println)
  (println (str *eight* "https://avalancheassociation.atlassian.net/browse/" (get issue "key")))
  (println)

  (println "INFO")
  (println *eight* "Epic:" (get-in issue ["fields" "parent" "fields" "summary"]))
  (println *eight* "Type:" (get-in issue ["fields" "issuetype" "name"]))
  (println *eight* "Priority:" (get-in issue ["fields" "priority" "name"]))
  (println *eight* "Assignee:" (get-in issue ["fields" "assignee" "displayName"]))
  (println *eight* "Reporter:" (get-in issue ["fields" "creator" "displayName"]))
  (if-let [sprint (get-sprint issue)]
    (println *eight* "Sprint:" sprint))
  (println)
  (if-let [att (render-attachments issue *eight*)]
    (do (println "ATTACHMENTS")
        (println att)))
  (println "DESCRIPTION")
  (println (render-content (get-in issue ["fields" "description"]) *eight*))

  (let [cmts (get-in issue ["fields" "comment" "comments"])]
    (if (< 0 (count cmts))
      (do (println "COMMENTS")
          (doseq [cmt cmts]
            (render-comment cmt *eight*))))))

(def status-kw
  {"Done"                     :done
   "Sprint Backlog"           :backlog
   "In progress"              :progress
   "Awaiting for PR Approval" :pr
   ;; These are bugs from the INFOEX project
   "Open"                     :bug-open
   "Resolved"                 :bug-done})

(def issue-view-keys)

(defn issue-view
  "Extract relevent keys from the raw Jira Issue"
  [i]
  ;;(pprint (get-in i ["fields" "description"]))
  {:key  (get-in i ["key"])
   :proj (get-in i ["fields" "project" "name"])
   :type (get-in i ["fields" "issuetype" "name"])
   :summary (get-in i ["fields" "summary"])
   :priority (get-in i ["fields" "priority" "name"])
   :status (status-kw (get-in i ["fields" "status" "name"]))
   :long-status (get-in i ["fields" "status" "name"])
   :text (render-content (get-in i ["fields" "description"]) "")
   ;:text (get-in i ["fields" "description" "content"])
   })

(def display-status
  {:done     "DONE"
   :backlog  "BKLG"
   :progress "INPRG"
   :pr       "PR"
   :bug-open "BOPEN"
   :bug-done "BDONE"})

(defn issue-display-short
  "Show single line issue descripition"
  [i]
  (let [[prj n] (s/split (:key i) "-")]
    (format "%7s %10s-%-5s  %s"
            (display-status (:status i))
            prj
            n
            (:summary i))))

(defn issue-display-long
  "Show full issue descripition with description"
  [i]
  (let [hdr (issue-display-short i)]
    (str hdr "\n" (:text i))))

(defn tk [c n]
  (take n c))

(defn mp [c f]
  (map f c))

(defn filter2 [c f]
  (filter f c))

(defn trace [x]
  (prn x)
  x)

(defn jira-req [q]
  (h/send
   {:url (str "https://avalancheassociation.atlassian.net/rest/api/3/search?jql=" q)
    :headers {"Authorization" (str "Basic " (token))
              "Accept" "application/json"}}))

(defn jira-get [id]
  (h/send
   {:url (str "https://avalancheassociation.atlassian.net/rest/api/3/issue/" id)
    :headers {"Authorization" (str "Basic " (token))
              "Accept" "application/json"}}))
(defn priority-sort
  "Transform an issue to a syntetic numeric priority for sorting"
  [c]
  (let [order {"High"   0
               "Medium" 1
               "Low"    2}]
    (sort-by #(order (or (:priority %) 20)) c)))

(defn not-done [x]
  (not (or (= (:status x) :done)
           (= (:status x) :bug-done))))

(defn show-list []
  (let [display-fn (if (some #(= % "-l") *command-line-args*)
                     issue-display-long
                     issue-display-short)
        is (-> (jira-req "assignee=currentuser()")
               :body
               j/read-string
               (get "issues")
               ;(mp trace)
               (mp issue-view)
               (filter2 not-done)
               (priority-sort)
               (mp display-fn))]
    (doseq [i is]
      (println i))))

(defn jdump [x]
  (println (j/write-string x))
  x)

(defn show-details [id]
  ;(println (format "Showing: %s" id))
  (-> (jira-get id)
      :body
      j/read-string
      #_jdump
      (render-detail-view)))

(defn main []
  (if (= 1 (count *command-line-args*))
    (show-details (first *command-line-args*))
    (show-list)))

(main)
